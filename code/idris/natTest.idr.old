module natTest

import nat
import bool
import pair

{-
Here are some examples of some objects (named values) of type nat.
-}

-- zero
z: nat
z = O

-- one
o: nat
o = S O

-- two
t: nat
t = S (S O)

-- three
r: nat
r = S t

-- HOMEWORK #5: Make up some examples of your own. Add them below this
-- comment.

-- four
f: nat
f = S r

-- five
i: nat
i = S f


-- HOMEWORK #7 Bind x to the result of applying isZero to r. Add your
-- code below this comment.

x: bool
x = (isZero r)

-- HOMEWORK #8 Bind y to the result of applying succ to O. Add code here.

y: nat
y = (succ z)

-- HOMEWORK #9 Bind a, b, c, d, e respectively to the results of
-- applying evenb to O, (S O), (S (S O)) r, and (S r),
-- respectively. Add your code here.

a: bool
a = (evenb O)

b: bool
b = (evenb (S O))

c: bool
c = (evenb (S (S O)))

d: bool
d = (evenb r)

e: bool
e = (evenb (S r))

-- HOMEWORK 12 -- Use the REPL to verify that these tests return the
-- expected results

||| a test, expecting O
h1: nat
h1 = addp (mkPair O O)

||| a test, expecting S (S O)
h2: nat
h2 = addp (mkPair O (S (S O)))

||| a test, expecting (S O)
h3: nat
h3 = addp (mkPair (S O) O)

||| a test, expecting (S (S (S (S (S O)))))
h4: nat
h4 = addp (mkPair (S (S O)) (S (S (S O))))

||| a test, expecting (S (S (S (S (S (S O))))))
h5: nat
h5 = multp (mkPair (S (S O)) (S (S (S O))))

-- Homework test cases for 9-26-15

||| a test, expecting (S O)
h6: nat
h6 = (factp O)

||| a test, expecting (S (S (S (S (S (S O))))))
h7: nat
h7 = factp (S (S (S O)))

||| a test, expecting O
h8: nat
h8 = subp (mkPair t i)

||| a test, expecting S (S O)
h9: nat
h9 = subp (mkPair f t)

||| a test, expecting S (S (S (S (S (S (S (S O)))))))
k1: nat
k1 = expp (mkPair t r)

||| a test, expecting (S O)
k2: nat
k2 = expp (mkPair t O)

||| a test, expecting (S O)
k3: nat
k3 = expp (mkPair O O)

||| a test, expecting true
k4: bool
k4 = lep (mkPair r r)

||| a test, expecting false
k5: bool
k5 = lep (mkPair t O)

||| a test, expecting true
k6: bool
k6 = lep (mkPair o r)

||| a test, expecting true
k7: bool
k7 = eqp (mkPair i i)

||| a test, expecting false
k8: bool
k8 = eqp (mkPair t O)

||| a test, expecting false
k9: bool
k9 = gtp (mkPair t t)

||| a test, expecting true
j1: bool
j1 = gtp (mkPair f O)

||| a test, expecting false
j2: bool
j2 = gtp (mkPair t r)

||| a test, expecting true
j3: bool
j3 = gep (mkPair f f)

||| a test, expecting false
j4: bool
j4 = gep (mkPair t f)

||| a test, expecting false
j5: bool
j5 = ltp (mkPair O O)

||| a test, expecting false
j6: bool
j6 = ltp (mkPair i r)

||| a test, expecting O
j7: nat
j7 = fibp O

||| a test, expecting S O
j8: nat
j8 = fibp (S O)

||| a test, expecting (S (S (S (S (S O)))))
j9: nat
j9 = fibp i
